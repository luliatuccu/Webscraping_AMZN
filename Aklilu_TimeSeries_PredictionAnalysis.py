# -*- coding: utf-8 -*-
"""Aklilu_TimeSeries_PredictionAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VRg6-29i3-9HwsSgQoq4XTR-R2hp_2um

# 3b-ii-4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM

# Load and clean the data
df = pd.read_csv("Aklilu_Historical_Data.csv", skiprows=1, header=None)
df.columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']
df['Date'] = pd.to_datetime(df['Date'])
df['Close'] = pd.to_numeric(df['Close'], errors='coerce')
df.set_index('Date', inplace=True)
df = df.dropna(subset=['Close'])

# Use the 'Close' price
close_data = df['Close'].values.reshape(-1, 1)

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(close_data)

# Create input sequences for training
sequence_length = 60
x_train, y_train = [], []

for i in range(sequence_length, len(scaled_data)):
    x_train.append(scaled_data[i-sequence_length:i, 0])
    y_train.append(scaled_data[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# Build LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(sequence_length, 1)))
model.add(LSTM(50))
model.add(Dense(25))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, batch_size=32, epochs=5)

# Start with last 60 values to forecast forward
forecast_input = scaled_data[-sequence_length:]
forecast_input = forecast_input.reshape(1, sequence_length, 1)

# Predict next 3650 days (â‰ˆ 10 years of daily prices)
future_predictions = []

for _ in range(3650):
    next_pred = model.predict(forecast_input)[0][0]
    future_predictions.append(next_pred)

    # Add the prediction to the input and slide the window
    forecast_input = np.append(forecast_input[:, 1:, :], [[[next_pred]]], axis=1)

# Inverse scale predictions
future_predictions = scaler.inverse_transform(np.array(future_predictions).reshape(-1, 1))

# Create future date index
last_date = df.index[-1]
future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=3650)

# Build forecast dataframe
forecast_df = pd.DataFrame(data=future_predictions, index=future_dates, columns=['Predicted_Close'])

# Plot
plt.figure(figsize=(14, 6))
plt.plot(df['Close'], label='Historical Close Price')
plt.plot(forecast_df['Predicted_Close'], label='Forecasted Close Price (Next 10 Years)', color='orange')
plt.title("Amazon Stock Price Forecast - 10 Years Ahead")
plt.xlabel("Date")
plt.ylabel("Close Price USD")
plt.legend()
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from scipy.signal import savgol_filter
import numpy as np

# Load predicted data (same format as from 3b-ii-3)
# You can pass this DataFrame directly from memory if you're in the same notebook:
# forecast_df = your existing forecast dataframe from 3b-ii-3

# For standalone script: load saved predictions
# forecast_df = pd.read_csv("Aklilu_10yr_Forecast.csv", index_col=0, parse_dates=True)

# If using in the same Colab cell, just continue from forecast_df:
ts_data = forecast_df['Predicted_Close']

# Decompose the 10-year forecasted series
decomposition = seasonal_decompose(ts_data, model='additive', period=365)

# Extract components
observed = decomposition.observed
trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

# Optional: Create "Cyclical" component via smoothing the trend
cyclical = savgol_filter(trend.fillna(method='bfill').fillna(method='ffill'), window_length=365, polyorder=3)

# Plot
plt.figure(figsize=(14, 16))

plt.subplot(5, 1, 1)
plt.plot(observed, color='black')
plt.title('Predicted Close Prices (Forecasted)')

plt.subplot(5, 1, 2)
plt.plot(trend, color='red')
plt.title('Trend')

plt.subplot(5, 1, 3)
plt.plot(seasonal, color='green')
plt.title('Seasonal')

plt.subplot(5, 1, 4)
plt.plot(cyclical, color='purple')
plt.title('Cyclical Component (Smoothed Trend)')

plt.subplot(5, 1, 5)
plt.plot(residual, color='blue')
plt.title('Irregular (Residual)')

plt.tight_layout()
plt.suptitle("Amazon 10-Year Forecast Decomposition", fontsize=18, y=1.02)
plt.show()