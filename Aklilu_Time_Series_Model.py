# -*- coding: utf-8 -*-
"""Aklilu_Time_Series_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RZEdpQvyg8uoRYr8gLtUpo3djacMiHOJ

# 3b-ii-1: Historical data
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
from sklearn.metrics import mean_squared_error

plt.style.use("fivethirtyeight")

# Read CSV while skipping the problematic 'AMZN' header row
df = pd.read_csv("Aklilu_Historical_Data.csv", skiprows=1)

# Manually assign correct column names
df.columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']

# Convert 'Date' to datetime and set as index
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

# Focus on 'Close' prices
data = df.filter(['Close'])
dataset = data.values

# Normalize close prices between 0 and 1
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(dataset)

# Split data into training (80%) and testing (20%)
training_data_len = math.ceil(len(scaled_data) * 0.8)
train_data = scaled_data[:training_data_len]
x_train, y_train = [], []

# Create sequences (60-day lookback)
for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])

# Convert to numpy and reshape for LSTM
x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# Build LSTM Model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(x_train, y_train, batch_size=32, epochs=3)

# Create test data
test_data = scaled_data[training_data_len - 60:]
x_test = []
y_test = dataset[training_data_len:]

for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# Make predictions and inverse scale
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, predictions))
print("RMSE:", rmse)

# Plot the results
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

plt.figure(figsize=(14, 6))
plt.title("Amazon Stock Price Prediction (LSTM Model)")
plt.xlabel("Date")
plt.ylabel("Close Price USD")
plt.plot(train['Close'], label='Train')
plt.plot(valid['Close'], label='Actual', color='blue')
plt.plot(valid['Predictions'], label='Predicted', color='orange')
plt.legend()
plt.tight_layout()
plt.show()